
[project]
name = "pluggedin-random-number-generator-mcp-python"
version = "1.0.0"
authors = [
  { name="VeriTeknik", email="cem@plugged.in" },
]
description = "A state-of-the-art cryptographically secure random number generator MCP server in Python."
readme = "README.md"
requires-python = ">=3.8"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Topic :: Security :: Cryptography",
    "Topic :: Software Development :: Libraries",
]
keywords = ["mcp", "model-context-protocol", "random", "cryptography", "rng", "prng", "csprng", "ai", "llm", "python"]

[project.urls]
"Homepage" = "https://github.com/VeriTeknik/pluggedin-random-number-generator-mcp-python"
"Bug Tracker" = "https://github.com/VeriTeknik/pluggedin-random-number-generator-mcp-python/issues"
"Repository" = "https://github.com/VeriTeknik/pluggedin-random-number-generator-mcp-python"
"Documentation" = "https://github.com/VeriTeknik/pluggedin-random-number-generator-mcp-python#readme"

[project.dependencies]
fastmcp = ">=0.1.0"

[project.scripts]
pluggedin-random-number-generator-mcp-python = "pluggedin_random_number_generator_mcp.server:main"

[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"pluggedin_random_number_generator_mcp" = ["py.typed"]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "build>=0.10.0",
    "twine>=4.0.0",
]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']

[tool.ruff]
line-length = 100
target-version = "py38"
select = ["E", "F", "I", "N", "UP", "B", "C4", "SIM", "RUF"]
ignore = ["E501", "B008"]

[tool.mypy]
python_version = "3.8"
strict = true
warn_return_any = true
warn_unused_configs = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
]


